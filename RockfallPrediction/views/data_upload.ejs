<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Management Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>

    <style>
        body {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        .bg-custom-dark { background-color: #0F172A; }
        .bg-custom-medium { background-color: #1E293B; }
        .bg-custom-light { background-color: #334155; }
        .border-custom-light { border-color: #475569; }
        .text-custom-orange { color: #F97316; }
        .bg-custom-orange { background-color: #F97316; }
        .hover\:bg-custom-orange-dark:hover { background-color: #EA580C; }

        .tab-button.active {
            background-color: #F97316;
            color: white;
            border-bottom-color: #F97316;
        }
        .tab-button {
            border-bottom: 2px solid transparent;
            transition: color 0.2s ease-in-out, border-color 0.2s ease-in-out;
        }
        .tab-button:not(.active):hover {
            color: #F97316;
            border-bottom-color: #475569;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }

        #sidebar, #main-content {
            transition: all 0.3s ease-in-out;
        }
        #sidebar.collapsed {
            width: 5rem;
        }
        #sidebar.collapsed .sidebar-text, 
        #sidebar.collapsed .sidebar-profile-text,
        #sidebar.collapsed #logo-text {
            opacity: 0;
            width: 0;
            overflow: hidden;
            white-space: nowrap;
        }
        #sidebar.collapsed .justify-center,
        #sidebar.collapsed .sidebar-profile-container {
             justify-content: center;
        }
        #sidebar .nav-link:hover {
            background-color: #F97316;
            color: white;
        }
        #main-content.sidebar-collapsed {
           margin-left: 5rem;
        }
         #main-content.sidebar-expanded {
           margin-left: 16rem;
        }
    </style>
</head>
<body class="bg-custom-dark text-gray-200">

    <div class="flex h-screen overflow-hidden">
        <aside id="sidebar" class="w-64 bg-white text-gray-800 flex flex-col p-4 space-y-6 fixed top-0 left-0 h-full z-10">
            <div class="flex items-center space-x-3 px-2">
                <i data-lucide="mountain" class="w-10 h-10 text-custom-orange flex-shrink-0"></i>
                <div id="logo-text">
                    <h1 class="font-bold text-lg">Rockfall: PitMine</h1>
                    <p class="text-sm text-gray-500">Slope Stability Monitor</p>
                </div>
            </div>

            <nav class="flex-grow">
                <ul class="space-y-2">
                    <% /* Add routes for sidebar navigation links below */ %>
                    <li><a href="/dashboard" class="nav-link flex items-center space-x-3 px-4 py-2 rounded-md"><i data-lucide="home" class="w-5 h-5 flex-shrink-0"></i><span class="sidebar-text">Dashboard</span></a></li>
                    <li><a href="/risk-map" class="nav-link flex items-center space-x-3 px-4 py-2 rounded-md"><i data-lucide="map" class="w-5 h-5 flex-shrink-0"></i><span class="sidebar-text">Risk Map</span></a></li>
                    <li><a href="/alerts" class="nav-link flex items-center space-x-3 px-4 py-2 rounded-md"><i data-lucide="alert-triangle" class="w-5 h-5 flex-shrink-0"></i><span class="sidebar-text">Alerts</span></a></li>
                    <li><a href="/data-upload" class="flex items-center space-x-3 px-4 py-2 rounded-lg bg-custom-orange text-white shadow-md"><i data-lucide="upload" class="w-5 h-5 flex-shrink-0"></i><span class="sidebar-text font-semibold">Data Upload</span></a></li>
                    <li><a href="/forecast" class="nav-link flex items-center space-x-3 px-4 py-2 rounded-md"><i data-lucide="trending-up" class="w-5 h-5 flex-shrink-0"></i><span class="sidebar-text">Forecast</span></a></li>
                    <li><a href="/settings" class="nav-link flex items-center space-x-3 px-4 py-2 rounded-md"><i data-lucide="settings" class="w-5 h-5 flex-shrink-0"></i><span class="sidebar-text">Settings</span></a></li>
                    <li><a href="/help" class="nav-link flex items-center space-x-3 px-4 py-2 rounded-md"><i data-lucide="help-circle" class="w-5 h-5 flex-shrink-0"></i><span class="sidebar-text">Help</span></a></li>
                </ul>
            </nav>

            <div class="bg-gray-100 p-4 rounded-lg">
                <div class="sidebar-profile-container flex items-center space-x-3">
                    <div class="w-10 h-10 bg-custom-orange rounded-full flex items-center justify-center text-white font-bold flex-shrink-0">D</div>
                    <div class="sidebar-profile-text">
                        <p class="font-semibold">Dhruv Diguvapalli</p>
                        <p class="text-sm text-gray-500">Analyst</p>
                    </div>
                </div>
                <button class="w-full mt-4 flex items-center justify-center space-x-2 border border-gray-300 rounded-md py-2 hover:bg-gray-200">
                    <i data-lucide="log-out" class="w-5 h-5 flex-shrink-0"></i>
                    <span class="sidebar-text">Sign Out</span>
                </button>
            </div>
        </aside>

        <main id="main-content" class="flex-1 flex flex-col sidebar-expanded">
            <header class="flex items-center justify-between p-4 border-b border-custom-light">
                <div class="flex items-center space-x-4">
                    <button id="sidebar-toggle" class="text-gray-400 hover:text-white transition-colors">
                        <i data-lucide="menu" class="w-6 h-6"></i>
                    </button>
                    <div class="flex items-center space-x-2 bg-green-900/50 text-green-400 border border-green-700 rounded-full px-4 py-1.5 text-sm">
                        <i data-lucide="shield-check" class="w-4 h-4"></i>
                        <span>System Online</span>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <button class="flex items-center space-x-2 bg-custom-light px-4 py-2 rounded-lg hover:bg-slate-600">
                        <i data-lucide="bell" class="w-5 h-5"></i>
                        <span>Notifications</span>
                    </button>
                    <div class="flex items-center space-x-3 bg-custom-light p-2 rounded-lg">
                         <div class="w-8 h-8 bg-custom-orange rounded-full flex items-center justify-center text-white font-bold text-sm">D</div>
                         <div>
                            <p class="font-semibold text-sm">Dhruv Diguvapalli</p>
                            <p class="text-xs text-gray-400">Analyst</p>
                         </div>
                    </div>
                    <button class="text-red-500 hover:text-red-400 border border-red-500 rounded-full p-2">
                        <i data-lucide="power" class="w-5 h-5"></i>
                    </button>
                </div>
            </header>

            <div class="flex-1 p-8 overflow-y-auto">
                <div class="max-w-7xl mx-auto">
                    <div class="flex justify-between items-center mb-6">
                        <div>
                            <h2 class="text-3xl font-bold text-white">Data Management</h2>
                            <p class="text-gray-400">Upload data files and manage sensor connections</p>
                        </div>
                        <div class="flex space-x-3">
                            <button class="flex items-center space-x-2 bg-white text-gray-800 font-semibold px-4 py-2 rounded-lg hover:bg-gray-200">
                                <i data-lucide="download" class="w-5 h-5"></i>
                                <span>Download Template</span>
                            </button>
                            <button class="flex items-center space-x-2 bg-custom-orange text-white font-semibold px-4 py-2 rounded-lg hover:bg-custom-orange-dark">
                                <i data-lucide="refresh-cw" class="w-5 h-5"></i>
                                <span>Sync All Sensors</span>
                            </button>
                        </div>
                    </div>

                    <div class="mb-6">
                        <div class="flex border-b border-custom-light">
                            <button class="tab-button active text-lg font-semibold px-6 py-3" onclick="openTab(event, 'fileUpload')">File Upload</button>
                            <button class="tab-button text-lg font-semibold text-gray-400 px-6 py-3" onclick="openTab(event, 'sensorIntegration')">Sensor Integration</button>
                            <button class="tab-button text-lg font-semibold text-gray-400 px-6 py-3" onclick="openTab(event, 'uploadHistory')">Upload History</button>
                        </div>
                    </div>

                    <div id="fileUpload" class="tab-content active">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                            <div class="bg-custom-medium p-6 rounded-lg text-center flex flex-col">
                                <h3 class="text-xl font-semibold mb-1 flex items-center justify-center space-x-2"><i data-lucide="database" class="w-6 h-6"></i><span>DEM Files</span></h3>
                                <p class="text-gray-400 text-sm mb-4">Digital Elevation Models (.tif, .dem)</p>
                                <label for="dem-upload" class="flex-grow border-2 border-dashed border-custom-light rounded-lg flex flex-col items-center justify-center p-8 cursor-pointer hover:bg-custom-light/50 transition-colors">
                                    <i data-lucide="database" class="w-12 h-12 text-gray-500"></i>
                                    <p class="mt-4 text-gray-400">Drop DEM files here</p>
                                    <p class="text-gray-500 my-2">or</p>
                                    <span class="bg-custom-light hover:bg-slate-600 text-white font-semibold px-4 py-2 rounded-lg flex items-center space-x-2 pointer-events-none">
                                        <i data-lucide="upload-cloud" class="w-5 h-5"></i>
                                        <span>Browse Files</span>
                                    </span>
                                </label>
                                <input type="file" id="dem-upload" class="hidden" multiple accept=".tif,.tiff,.dem,.asc">
                            </div>
                            <div class="bg-custom-medium p-6 rounded-lg text-center flex flex-col">
                                <h3 class="text-xl font-semibold mb-1 flex items-center justify-center space-x-2"><i data-lucide="image" class="w-6 h-6"></i><span>Drone Imagery</span></h3>
                                <p class="text-gray-400 text-sm mb-4">Aerial photos (.jpg, .tiff, .png)</p>
                                <label for="drone-upload" class="flex-grow border-2 border-dashed border-custom-light rounded-lg flex flex-col items-center justify-center p-8 cursor-pointer hover:bg-custom-light/50 transition-colors">
                                    <i data-lucide="image" class="w-12 h-12 text-gray-500"></i>
                                    <p class="mt-4 text-gray-400">Drop images here</p>
                                    <p class="text-gray-500 my-2">or</p>
                                    <span class="bg-custom-light hover:bg-slate-600 text-white font-semibold px-4 py-2 rounded-lg flex items-center space-x-2 pointer-events-none">
                                        <i data-lucide="upload-cloud" class="w-5 h-5"></i>
                                        <span>Browse Files</span>
                                    </span>
                                </label>
                                <input type="file" id="drone-upload" class="hidden" multiple accept=".jpg,.jpeg,.tiff,.tif,.png">
                            </div>
                            <div class="bg-custom-medium p-6 rounded-lg text-center flex flex-col">
                                <h3 class="text-xl font-semibold mb-1 flex items-center justify-center space-x-2"><i data-lucide="activity" class="w-6 h-6"></i><span>Sensor Data</span></h3>
                                <p class="text-gray-400 text-sm mb-4">CSV data files (.csv, .txt)</p>
                                <label for="sensor-upload" class="flex-grow border-2 border-dashed border-custom-light rounded-lg flex flex-col items-center justify-center p-8 cursor-pointer hover:bg-custom-light/50 transition-colors">
                                    <i data-lucide="activity" class="w-12 h-12 text-gray-500"></i>
                                    <p class="mt-4 text-gray-400">Drop data files here</p>
                                    <p class="text-gray-500 my-2">or</p>
                                    <span class="bg-custom-light hover:bg-slate-600 text-white font-semibold px-4 py-2 rounded-lg flex items-center space-x-2 pointer-events-none">
                                        <i data-lucide="upload-cloud" class="w-5 h-5"></i>
                                        <span>Browse Files</span>
                                    </span>
                                </label>
                                <input type="file" id="sensor-upload" class="hidden" multiple accept=".csv,.txt">
                            </div>
                        </div>
                        <div class="bg-custom-medium p-6 rounded-lg">
                            <h3 class="text-xl font-semibold mb-4">Upload Guidelines</h3>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 text-sm text-gray-300">
                                <div>
                                    <h4 class="font-semibold mb-2">DEM Files</h4>
                                    <ul class="list-disc list-inside space-y-1 text-gray-400">
                                        <li>Max file size: 100MB</li>
                                        <li>Supported: .tif, .dem, .asc</li>
                                        <li>Include coordinate system info</li>
                                        <li>Resolution: 1-5m recommended</li>
                                    </ul>
                                </div>
                                <div>
                                    <h4 class="font-semibold mb-2">Drone Imagery</h4>
                                    <ul class="list-disc list-inside space-y-1 text-gray-400">
                                        <li>Max file size: 50MB per image</li>
                                        <li>Supported: .jpg, .png, .tiff</li>
                                        <li>Include GPS coordinates</li>
                                        <li>Minimum resolution: 1920x1080</li>
                                    </ul>
                                </div>
                                <div>
                                    <h4 class="font-semibold mb-2">Sensor Data</h4>
                                    <ul class="list-disc list-inside space-y-1 text-gray-400">
                                        <li>Max file size: 10MB</li>
                                        <li>Format: CSV with headers</li>
                                        <li>Include timestamp column</li>
                                        <li>Use consistent units</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="sensorIntegration" class="tab-content">
                        <div class="grid grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                            <div class="bg-custom-medium p-5 rounded-lg text-center">
                                <p class="text-3xl font-bold text-green-400">2</p>
                                <p class="text-gray-400">Online</p>
                            </div>
                            <div class="bg-custom-medium p-5 rounded-lg text-center">
                                <p class="text-3xl font-bold text-yellow-400">1</p>
                                <p class="text-gray-400">Warning</p>
                            </div>
                            <div class="bg-custom-medium p-5 rounded-lg text-center">
                                <p class="text-3xl font-bold text-red-500">1</p>
                                <p class="text-gray-400">Offline</p>
                            </div>
                            <div class="bg-custom-medium p-5 rounded-lg text-center">
                                <p class="text-3xl font-bold text-blue-400">75%</p>
                                <p class="text-gray-400">Uptime</p>
                            </div>
                        </div>
                        <div class="bg-custom-medium p-6 rounded-lg mb-8">
                            <h3 class="text-xl font-semibold mb-1">Connected Sensors</h3>
                            <p class="text-gray-400 mb-4">Monitor and manage sensor connections</p>
                            <div class="space-y-4">
                                <div class="bg-custom-light p-4 rounded-lg flex items-center justify-between">
                                    <div class="flex items-center space-x-4">
                                        <i data-lucide="check-circle-2" class="w-6 h-6 text-green-500"></i>
                                        <div>
                                            <p class="font-semibold">Piezometer A-1</p>
                                            <p class="text-sm text-gray-400">Groundwater sensor</p>
                                        </div>
                                    </div>
                                    <div class="flex items-center space-x-6">
                                        <div class="text-right">
                                            <p class="font-semibold text-green-400">Online</p>
                                            <p class="text-sm text-gray-500">Last sync: 2 min ago</p>
                                        </div>
                                        <button class="bg-white text-gray-800 font-semibold px-4 py-2 rounded-lg hover:bg-gray-200">Configure</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="bg-custom-medium p-6 rounded-lg">
                            <h3 class="text-xl font-semibold mb-1">Add New Sensor</h3>
                             <form class="space-y-4 mt-4">
                                <div class="pt-2">
                                    <button type="submit" class="bg-custom-orange text-white font-semibold px-5 py-2.5 rounded-lg hover:bg-custom-orange-dark flex items-center space-x-2">
                                        <i data-lucide="wifi" class="w-5 h-5"></i>
                                        <span>Connect Sensor</span>
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                    
                    <div id="uploadHistory" class="tab-content">
                         <div class="bg-custom-medium p-6 rounded-lg">
                             <h3 class="text-xl font-semibold mb-4">Upload History</h3>
                             <% /*
                                SERVER-SIDE DATA FETCHING (Example for your backend route)
                                -----------------------------------------------------------
                                This EJS template expects a variable called 'uploadHistory' to be passed from your server.
                                This variable should be an array of objects fetched from your MongoDB collection.
    
                                Example in an Express.js route:
    
                                const Upload = require('../models/uploadModel'); // Your Mongoose model
    
                                router.get('/data-management', async (req, res) => {
                                    try {
                                        const history = await Upload.find({}).sort({ uploadDate: -1 }).limit(10);
                                        res.render('dashboard', {
                                            uploadHistory: history,
                                            user: req.user // Assuming user is available from session/auth middleware
                                        });
                                    } catch (error) {
                                        console.error(error);
                                        res.render('dashboard', {
                                            uploadHistory: []
                                        });
                                    }
                                });
                            */ %>
                             <div class="overflow-x-auto">
                                <table class="w-full text-left">
                                    <thead class="border-b border-custom-light">
                                        <tr>
                                            <th class="p-4 font-semibold">File Name</th>
                                            <th class="p-4 font-semibold">File Type</th>
                                            <th class="p-4 font-semibold">Upload Date</th>
                                            <th class="p-4 font-semibold">Status</th>
                                            <th class="p-4 font-semibold">Uploaded By</th>
                                        </tr>
                                    </thead>
                                    <tbody class="divide-y divide-custom-light">
                                        <% if(typeof uploadHistory !== 'undefined' && uploadHistory.length > 0) { %>
                                            <% uploadHistory.forEach(function(upload) { %>
                                                <tr>
                                                    <td class="p-4"><%= upload.fileName %></td>
                                                    <td class="p-4"><%= upload.fileType %></td>
                                                    <td class="p-4"><%= new Date(upload.uploadDate).toLocaleString() %></td>
                                                    <td class="p-4">
                                                        <% if(upload.status === 'Processed') { %>
                                                            <span class="bg-green-500/20 text-green-400 text-xs font-semibold px-2 py-1 rounded-full">Processed</span>
                                                        <% } else if(upload.status === 'Processing') { %>
                                                            <span class="bg-yellow-500/20 text-yellow-400 text-xs font-semibold px-2 py-1 rounded-full">Processing</span>
                                                        <% } else if(upload.status === 'Failed') { %>
                                                            <span class="bg-red-500/20 text-red-400 text-xs font-semibold px-2 py-1 rounded-full">Failed</span>
                                                        <% } else { %>
                                                            <span class="bg-gray-500/20 text-gray-400 text-xs font-semibold px-2 py-1 rounded-full"><%= upload.status %></span>
                                                        <% } %>
                                                    </td>
                                                    <td class="p-4"><%= upload.uploadedBy %></td>
                                                </tr>
                                            <% }); %>
                                        <% } else { %>
                                            <tr>
                                                <td colspan="5" class="p-4 text-center text-gray-400">No upload history found.</td>
                                            </tr>
                                        <% } %>
                                    </tbody>
                                </table>
                            </div>
                         </div>
                    </div>
                </div>
            </div>

            <footer class="p-4 text-center text-sm text-gray-500 border-t border-custom-light">
                © <%= new Date().getFullYear() %> Rockfall: PitMine Monitor. All Rights Reserved.
                 <a href="#" class="hover:text-custom-orange ml-4">Privacy Policy</a>
                 <a href="#" class="hover:text-custom-orange ml-4">Terms of Service</a>
            </footer>
        </main>
    </div>
    
    <div class="fixed bottom-8 right-8 w-12 h-12 bg-custom-light rounded-full flex items-center justify-center text-2xl font-bold text-gray-400 cursor-pointer hover:bg-slate-600">?</div>

    <script>
        /*
            SERVER-SIDE FILE UPLOAD HANDLING (Example for your backend: server.js or routes/upload.js)
            -----------------------------------------------------------------------------------------
            This is conceptual code to show how your Node.js/Express server should handle file uploads
            from the frontend. You would need to install express, mongoose, and multer:
            npm install express mongoose multer
        */
        /*
            // 1. Import necessary packages
            const express = require('express');
            const mongoose = require('mongoose');
            const multer = require('multer');
            const path = require('path');
            
            // 2. Define a Mongoose Schema and Model for storing file metadata
            const uploadSchema = new mongoose.Schema({
                fileName: { type: String, required: true },
                fileType: { type: String, required: true }, // e.g., 'DEM', 'Drone Imagery', 'Sensor Data'
                filePath: { type: String, required: true }, // Path on the server where the file is stored
                fileSize: { type: Number, required: true },
                uploadDate: { type: Date, default: Date.now },
                status: { type: String, default: 'Processing' }, // e.g., 'Processing', 'Processed', 'Failed'
                uploadedBy: { type: String, required: true } // Identifier for the user who uploaded the file
            });
            const Upload = mongoose.model('Upload', uploadSchema);

            // 3. Configure Multer for file storage
            const storage = multer.diskStorage({
                destination: function (req, file, cb) {
                    // Store files in a directory like 'uploads/'
                    cb(null, 'uploads/') 
                },
                filename: function (req, file, cb) {
                    // Create a unique filename to avoid overwrites
                    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname))
                }
            });
            const upload = multer({ storage: storage });

            // 4. Create an Express POST route to handle the upload
            const app = express(); // Assuming 'app' is your Express instance
            app.post('/upload', upload.array('files'), async (req, res) => {
                // 'upload.array('files')' tells Multer to expect multiple files from a field named 'files'
                
                try {
                    const { fileType } = req.body; // Get the file type from the form data
                    const uploadedBy = "Dhruv Diguvapalli"; // Replace with actual authenticated user info
                    
                    if (!req.files || req.files.length === 0) {
                        return res.status(400).json({ message: 'No files uploaded.' });
                    }

                    // Create a database entry for each uploaded file
                    const uploadPromises = req.files.map(file => {
                        const newUpload = new Upload({
                            fileName: file.originalname,
                            fileType: fileType,
                            filePath: file.path,
                            fileSize: file.size,
                            uploadedBy: uploadedBy
                        });
                        return newUpload.save();
                    });

                    await Promise.all(uploadPromises);

                    res.status(201).json({ message: 'Files uploaded and records created successfully.' });

                } catch (error) {
                    console.error('Error uploading files:', error);
                    res.status(500).json({ message: 'Server error during file upload.' });
                }
            });
        */

        document.addEventListener('DOMContentLoaded', function() {
            window.openTab = function(event, tabName) {
                let i, tabcontent, tabbuttons;
                tabcontent = document.getElementsByClassName("tab-content");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }
                tabbuttons = document.getElementsByClassName("tab-button");
                for (i = 0; i < tabbuttons.length; i++) {
                    tabbuttons[i].className = tabbuttons[i].className.replace(" active", "");
                    tabbuttons[i].classList.add('text-gray-400');
                }
                document.getElementById(tabName).style.display = "block";
                event.currentTarget.className += " active";
                event.currentTarget.classList.remove('text-gray-400');
            }

            lucide.createIcons();

            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('main-content');
            const sidebarToggle = document.getElementById('sidebar-toggle');
            let isSidebarPinned = false;

            function collapseSidebar() {
                sidebar.classList.add('collapsed');
                mainContent.classList.remove('sidebar-expanded');
                mainContent.classList.add('sidebar-collapsed');
            }

            function expandSidebar() {
                sidebar.classList.remove('collapsed');
                mainContent.classList.remove('sidebar-collapsed');
                mainContent.classList.add('sidebar-expanded');
            }
            
            collapseSidebar();

            sidebarToggle.addEventListener('click', function() {
                isSidebarPinned = !isSidebarPinned;
                if (isSidebarPinned) {
                    expandSidebar();
                } else {
                    collapseSidebar();
                }
            });

            sidebar.addEventListener('mouseenter', function() {
                if (!isSidebarPinned) {
                    expandSidebar();
                }
            });

            sidebar.addEventListener('mouseleave', function() {
                if (!isSidebarPinned) {
                    collapseSidebar();
                }
            });

            // File Upload Handling
            const demUploadInput = document.getElementById('dem-upload');
            const droneUploadInput = document.getElementById('drone-upload');
            const sensorUploadInput = document.getElementById('sensor-upload');

            demUploadInput.addEventListener('change', (e) => handleFileUpload(e.target.files, 'DEM Files'));
            droneUploadInput.addEventListener('change', (e) => handleFileUpload(e.target.files, 'Drone Imagery'));
            sensorUploadInput.addEventListener('change', (e) => handleFileUpload(e.target.files, 'Sensor Data'));

            function handleFileUpload(files, fileType) {
                if (!files || files.length === 0) {
                    return;
                }

                const formData = new FormData();
                for (let i = 0; i < files.length; i++) {
                    formData.append('files', files[i]);
                }
                formData.append('fileType', fileType);

                // Example: Show a simple alert. In a real app, you'd use a better UI element.
                alert(`Uploading ${files.length} file(s) of type "${fileType}"...`);

                fetch('/upload', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    alert('Upload successful! Refreshing history...');
                    // Automatically refresh the page to see the new entry in the history table
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error during file upload:', error);
                    alert('Upload failed. Please check the console for details.');
                });
            }
        });
    </script>
</body>
</html>

